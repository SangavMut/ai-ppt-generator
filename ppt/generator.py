from services.gemini_client import GeminiClient
from services.image_downloader import ImageDownloader
from ppt.slide_creators import SlideCreators
from pptx import Presentation
import os

class PPTGenerator:
    def __init__(self):
        # Instantiate ImageDownloader
        self.image_downloader = ImageDownloader()

        self.gemini_client = GeminiClient()
        self.presentation = Presentation()

        # Pass image_downloader to SlideCreators
        self.slide_creators = SlideCreators(self.presentation, self.image_downloader)

    def generate_presentation(self, topic, num_slides=5, output_path="generated_presentation.pptx"):
        """Generate a complete PowerPoint presentation"""
        print(f"Generating presentation on: {topic}")
        outline = self.gemini_client.generate_content_outline(topic, num_slides)

        for i, slide_data in enumerate(outline):
            title = slide_data["title"]
            content = slide_data["content"]
            slide_type = slide_data["slide_type"]

            print(f"Creating slide {i+1}: {title}")
            if i == 0 or slide_type == "title":
                self.slide_creators.create_title_slide(title, f"Generated by Gemini AI")
            elif slide_type == "image":
                image_query = self.gemini_client.generate_image_description(content)
                self.slide_creators.create_image_slide(title, content, image_query)
            else:
                include_image = (i % 3 == 0)
                self.slide_creators.create_content_slide(title, content, include_image)

        self.presentation.save(output_path)
        return output_path
